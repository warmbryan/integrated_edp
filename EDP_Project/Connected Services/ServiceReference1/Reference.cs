//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDP_Project.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusiness", ReplyAction="http://tempuri.org/IService1/CreateBusinessResponse")]
        bool CreateBusiness(string name, string regNum, string url, string type, string acra, string logoId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusiness", ReplyAction="http://tempuri.org/IService1/CreateBusinessResponse")]
        System.Threading.Tasks.Task<bool> CreateBusinessAsync(string name, string regNum, string url, string type, string acra, string logoId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllBusinesses", ReplyAction="http://tempuri.org/IService1/GetAllBusinessesResponse")]
        DBService.Models.Business[] GetAllBusinesses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllBusinesses", ReplyAction="http://tempuri.org/IService1/GetAllBusinessesResponse")]
        System.Threading.Tasks.Task<DBService.Models.Business[]> GetAllBusinessesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllBusinessByUserId", ReplyAction="http://tempuri.org/IService1/GetAllBusinessByUserIdResponse")]
        DBService.Models.Business[] GetAllBusinessByUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllBusinessByUserId", ReplyAction="http://tempuri.org/IService1/GetAllBusinessByUserIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.Business[]> GetAllBusinessByUserIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleBusinessByBusinessId", ReplyAction="http://tempuri.org/IService1/GetSingleBusinessByBusinessIdResponse")]
        DBService.Models.Business GetSingleBusinessByBusinessId(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleBusinessByBusinessId", ReplyAction="http://tempuri.org/IService1/GetSingleBusinessByBusinessIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.Business> GetSingleBusinessByBusinessIdAsync(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBusinessDetails", ReplyAction="http://tempuri.org/IService1/UpdateBusinessDetailsResponse")]
        bool UpdateBusinessDetails(string businessId, string name, string registrationNumber, string url, string type, string acra, string logoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBusinessDetails", ReplyAction="http://tempuri.org/IService1/UpdateBusinessDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateBusinessDetailsAsync(string businessId, string name, string registrationNumber, string url, string type, string acra, string logoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBusiness", ReplyAction="http://tempuri.org/IService1/DeleteBusinessResponse")]
        bool DeleteBusiness(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBusiness", ReplyAction="http://tempuri.org/IService1/DeleteBusinessResponse")]
        System.Threading.Tasks.Task<bool> DeleteBusinessAsync(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployeeByBusinessId", ReplyAction="http://tempuri.org/IService1/GetAllEmployeeByBusinessIdResponse")]
        DBService.Models.BusinessEmployeeAccess[] GetAllEmployeeByBusinessId(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployeeByBusinessId", ReplyAction="http://tempuri.org/IService1/GetAllEmployeeByBusinessIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessEmployeeAccess[]> GetAllEmployeeByBusinessIdAsync(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployeeToBusinessByEmail", ReplyAction="http://tempuri.org/IService1/AddEmployeeToBusinessByEmailResponse")]
        bool AddEmployeeToBusinessByEmail(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployeeToBusinessByEmail", ReplyAction="http://tempuri.org/IService1/AddEmployeeToBusinessByEmailResponse")]
        System.Threading.Tasks.Task<bool> AddEmployeeToBusinessByEmailAsync(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BusinessUserExists", ReplyAction="http://tempuri.org/IService1/BusinessUserExistsResponse")]
        bool BusinessUserExists(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BusinessUserExists", ReplyAction="http://tempuri.org/IService1/BusinessUserExistsResponse")]
        System.Threading.Tasks.Task<bool> BusinessUserExistsAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllInvitationsByUserId", ReplyAction="http://tempuri.org/IService1/GetAllInvitationsByUserIdResponse")]
        DBService.Models.BusinessEmployeeAccess[] GetAllInvitationsByUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllInvitationsByUserId", ReplyAction="http://tempuri.org/IService1/GetAllInvitationsByUserIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessEmployeeAccess[]> GetAllInvitationsByUserIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEmployeeAccess", ReplyAction="http://tempuri.org/IService1/UpdateEmployeeAccessResponse")]
        bool UpdateEmployeeAccess(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEmployeeAccess", ReplyAction="http://tempuri.org/IService1/UpdateEmployeeAccessResponse")]
        System.Threading.Tasks.Task<bool> UpdateEmployeeAccessAsync(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployeeAccess", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeAccessResponse")]
        bool DeleteEmployeeAccess(string userId, string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployeeAccess", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeAccessResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAccessAsync(string userId, string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusinessUser", ReplyAction="http://tempuri.org/IService1/CreateBusinessUserResponse")]
        bool CreateBusinessUser(string name, string email, string password, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusinessUser", ReplyAction="http://tempuri.org/IService1/CreateBusinessUserResponse")]
        System.Threading.Tasks.Task<bool> CreateBusinessUserAsync(string name, string email, string password, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessUserByUserId", ReplyAction="http://tempuri.org/IService1/GetBusinessUserByUserIdResponse")]
        DBService.Models.BusinessUser GetBusinessUserByUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessUserByUserId", ReplyAction="http://tempuri.org/IService1/GetBusinessUserByUserIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessUser> GetBusinessUserByUserIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessUserByEmail", ReplyAction="http://tempuri.org/IService1/GetBusinessUserByEmailResponse")]
        DBService.Models.BusinessUser GetBusinessUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessUserByEmail", ReplyAction="http://tempuri.org/IService1/GetBusinessUserByEmailResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessUser> GetBusinessUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCustomer", ReplyAction="http://tempuri.org/IService1/InsertCustomerResponse")]
        short InsertCustomer(string firstName, string lastName, string email, string password, string phoneNumber, System.DateTime dateOfBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCustomer", ReplyAction="http://tempuri.org/IService1/InsertCustomerResponse")]
        System.Threading.Tasks.Task<short> InsertCustomerAsync(string firstName, string lastName, string email, string password, string phoneNumber, System.DateTime dateOfBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectOneCustomer", ReplyAction="http://tempuri.org/IService1/SelectOneCustomerResponse")]
        DBService.Models.CustomerClass SelectOneCustomer(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectOneCustomer", ReplyAction="http://tempuri.org/IService1/SelectOneCustomerResponse")]
        System.Threading.Tasks.Task<DBService.Models.CustomerClass> SelectOneCustomerAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllCustomer", ReplyAction="http://tempuri.org/IService1/SelectAllCustomerResponse")]
        DBService.Models.CustomerClass[] SelectAllCustomer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllCustomer", ReplyAction="http://tempuri.org/IService1/SelectAllCustomerResponse")]
        System.Threading.Tasks.Task<DBService.Models.CustomerClass[]> SelectAllCustomerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyCustomer", ReplyAction="http://tempuri.org/IService1/VerifyCustomerResponse")]
        DBService.Models.CustomerClass VerifyCustomer(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyCustomer", ReplyAction="http://tempuri.org/IService1/VerifyCustomerResponse")]
        System.Threading.Tasks.Task<DBService.Models.CustomerClass> VerifyCustomerAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyPassword", ReplyAction="http://tempuri.org/IService1/VerifyPasswordResponse")]
        bool VerifyPassword(string Email, string Password, string Role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyPassword", ReplyAction="http://tempuri.org/IService1/VerifyPasswordResponse")]
        System.Threading.Tasks.Task<bool> VerifyPasswordAsync(string Email, string Password, string Role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomer", ReplyAction="http://tempuri.org/IService1/UpdateCustomerResponse")]
        short UpdateCustomer(System.Guid ID, string PastEmail, string firstName, string lastName, string email, string PhoneNumber, System.DateTime dateOfBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomer", ReplyAction="http://tempuri.org/IService1/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<short> UpdateCustomerAsync(System.Guid ID, string PastEmail, string firstName, string lastName, string email, string PhoneNumber, System.DateTime dateOfBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomerPassword", ReplyAction="http://tempuri.org/IService1/UpdateCustomerPasswordResponse")]
        short UpdateCustomerPassword(System.Guid ID, string PastEmail, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomerPassword", ReplyAction="http://tempuri.org/IService1/UpdateCustomerPasswordResponse")]
        System.Threading.Tasks.Task<short> UpdateCustomerPasswordAsync(System.Guid ID, string PastEmail, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomerStatus", ReplyAction="http://tempuri.org/IService1/UpdateCustomerStatusResponse")]
        short UpdateCustomerStatus(System.Guid ID, string PastEmail, string purpose, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomerStatus", ReplyAction="http://tempuri.org/IService1/UpdateCustomerStatusResponse")]
        System.Threading.Tasks.Task<short> UpdateCustomerStatusAsync(System.Guid ID, string PastEmail, string purpose, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCustomer", ReplyAction="http://tempuri.org/IService1/DeleteCustomerResponse")]
        short DeleteCustomer(System.Guid ID, string Email, System.DateTime deleteDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCustomer", ReplyAction="http://tempuri.org/IService1/DeleteCustomerResponse")]
        System.Threading.Tasks.Task<short> DeleteCustomerAsync(System.Guid ID, string Email, System.DateTime deleteDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctShopNameFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctShopNameFromBranchResponse")]
        string[] SelectDistinctShopNameFromBranch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctShopNameFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctShopNameFromBranchResponse")]
        System.Threading.Tasks.Task<string[]> SelectDistinctShopNameFromBranchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctLocationFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctLocationFromBranchResponse")]
        System.Data.DataSet SelectDistinctLocationFromBranch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctLocationFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctLocationFromBranchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectDistinctLocationFromBranchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctCategoryFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctCategoryFromBranchResponse")]
        System.Data.DataSet SelectDistinctCategoryFromBranch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctCategoryFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctCategoryFromBranchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectDistinctCategoryFromBranchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFromBranch", ReplyAction="http://tempuri.org/IService1/SearchFromBranchResponse")]
        System.Data.DataSet SearchFromBranch(string search, string location, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFromBranch", ReplyAction="http://tempuri.org/IService1/SearchFromBranchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchFromBranchAsync(string search, string location, string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByIdFromBranch", ReplyAction="http://tempuri.org/IService1/SelectByIdFromBranchResponse")]
        DBService.Models.Branch SelectByIdFromBranch(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByIdFromBranch", ReplyAction="http://tempuri.org/IService1/SelectByIdFromBranchResponse")]
        System.Threading.Tasks.Task<DBService.Models.Branch> SelectByIdFromBranchAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSearch", ReplyAction="http://tempuri.org/IService1/CreateSearchResponse")]
        int CreateSearch(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSearch", ReplyAction="http://tempuri.org/IService1/CreateSearchResponse")]
        System.Threading.Tasks.Task<int> CreateSearchAsync(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromSearch", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromSearchResponse")]
        System.Data.DataSet SelectByCustomerIdFromSearch(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromSearch", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromSearchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromSearchAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromSearch", ReplyAction="http://tempuri.org/IService1/HaveDateFromSearchResponse")]
        int HaveDateFromSearch(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromSearch", ReplyAction="http://tempuri.org/IService1/HaveDateFromSearchResponse")]
        System.Threading.Tasks.Task<int> HaveDateFromSearchAsync(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSearch", ReplyAction="http://tempuri.org/IService1/UpdateSearchResponse")]
        int UpdateSearch(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSearch", ReplyAction="http://tempuri.org/IService1/UpdateSearchResponse")]
        System.Threading.Tasks.Task<int> UpdateSearchAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromSearch", ReplyAction="http://tempuri.org/IService1/DeleteFromSearchResponse")]
        int DeleteFromSearch(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromSearch", ReplyAction="http://tempuri.org/IService1/DeleteFromSearchResponse")]
        System.Threading.Tasks.Task<int> DeleteFromSearchAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertView", ReplyAction="http://tempuri.org/IService1/InsertViewResponse")]
        int InsertView(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertView", ReplyAction="http://tempuri.org/IService1/InsertViewResponse")]
        System.Threading.Tasks.Task<int> InsertViewAsync(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromView", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromViewResponse")]
        System.Data.DataSet SelectByCustomerIdFromView(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromView", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromViewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromViewAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromView", ReplyAction="http://tempuri.org/IService1/HaveDateFromViewResponse")]
        int HaveDateFromView(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromView", ReplyAction="http://tempuri.org/IService1/HaveDateFromViewResponse")]
        System.Threading.Tasks.Task<int> HaveDateFromViewAsync(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateView", ReplyAction="http://tempuri.org/IService1/UpdateViewResponse")]
        int UpdateView(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateView", ReplyAction="http://tempuri.org/IService1/UpdateViewResponse")]
        System.Threading.Tasks.Task<int> UpdateViewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromView", ReplyAction="http://tempuri.org/IService1/DeleteFromViewResponse")]
        int DeleteFromView(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromView", ReplyAction="http://tempuri.org/IService1/DeleteFromViewResponse")]
        System.Threading.Tasks.Task<int> DeleteFromViewAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertReview", ReplyAction="http://tempuri.org/IService1/InsertReviewResponse")]
        int InsertReview(double rating, string comment, string title, System.Guid customerId, System.Guid branchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertReview", ReplyAction="http://tempuri.org/IService1/InsertReviewResponse")]
        System.Threading.Tasks.Task<int> InsertReviewAsync(double rating, string comment, string title, System.Guid customerId, System.Guid branchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectByBranchIdFromReviewResponse")]
        System.Data.DataSet SelectByBranchIdFromReview(System.Guid id, System.Guid customerId, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectByBranchIdFromReviewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByBranchIdFromReviewAsync(System.Guid id, System.Guid customerId, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectAllByBranchIdFromReviewResponse")]
        System.Data.DataSet SelectAllByBranchIdFromReview(System.Guid id, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectAllByBranchIdFromReviewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBranchIdFromReviewAsync(System.Guid id, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveExistingReview", ReplyAction="http://tempuri.org/IService1/HaveExistingReviewResponse")]
        DBService.Models.Review HaveExistingReview(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveExistingReview", ReplyAction="http://tempuri.org/IService1/HaveExistingReviewResponse")]
        System.Threading.Tasks.Task<DBService.Models.Review> HaveExistingReviewAsync(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateReview", ReplyAction="http://tempuri.org/IService1/UpdateReviewResponse")]
        int UpdateReview(int id, string title, string comment, double rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateReview", ReplyAction="http://tempuri.org/IService1/UpdateReviewResponse")]
        System.Threading.Tasks.Task<int> UpdateReviewAsync(int id, string title, string comment, double rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteReview", ReplyAction="http://tempuri.org/IService1/DeleteReviewResponse")]
        int DeleteReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteReview", ReplyAction="http://tempuri.org/IService1/DeleteReviewResponse")]
        System.Threading.Tasks.Task<int> DeleteReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromReviewResponse")]
        System.Data.DataSet SelectByCustomerIdFromReview(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromReviewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromReviewAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectRatingByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectRatingByBranchIdFromReviewResponse")]
        double SelectRatingByBranchIdFromReview(System.Guid branchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectRatingByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectRatingByBranchIdFromReviewResponse")]
        System.Threading.Tasks.Task<double> SelectRatingByBranchIdFromReviewAsync(System.Guid branchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectReportedReview", ReplyAction="http://tempuri.org/IService1/SelectReportedReviewResponse")]
        System.Data.DataSet SelectReportedReview();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectReportedReview", ReplyAction="http://tempuri.org/IService1/SelectReportedReviewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectReportedReviewAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNumReportToReview", ReplyAction="http://tempuri.org/IService1/AddNumReportToReviewResponse")]
        int AddNumReportToReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNumReportToReview", ReplyAction="http://tempuri.org/IService1/AddNumReportToReviewResponse")]
        System.Threading.Tasks.Task<int> AddNumReportToReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetNumReportToReview", ReplyAction="http://tempuri.org/IService1/ResetNumReportToReviewResponse")]
        int ResetNumReportToReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetNumReportToReview", ReplyAction="http://tempuri.org/IService1/ResetNumReportToReviewResponse")]
        System.Threading.Tasks.Task<int> ResetNumReportToReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAppointment", ReplyAction="http://tempuri.org/IService1/CreateAppointmentResponse")]
        int CreateAppointment(string aptdate, string apttime, string bookdate, string booktime, string partysize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAppointment", ReplyAction="http://tempuri.org/IService1/CreateAppointmentResponse")]
        System.Threading.Tasks.Task<int> CreateAppointmentAsync(string aptdate, string apttime, string bookdate, string booktime, string partysize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusinessRole", ReplyAction="http://tempuri.org/IService1/CreateBusinessRoleResponse")]
        DBService.Models.BusinessRole CreateBusinessRole(string name, string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusinessRole", ReplyAction="http://tempuri.org/IService1/CreateBusinessRoleResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessRole> CreateBusinessRoleAsync(string name, string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessRole", ReplyAction="http://tempuri.org/IService1/GetBusinessRoleResponse")]
        DBService.Models.BusinessRole GetBusinessRole(string businessRoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessRole", ReplyAction="http://tempuri.org/IService1/GetBusinessRoleResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessRole> GetBusinessRoleAsync(string businessRoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBusinessRole", ReplyAction="http://tempuri.org/IService1/UpdateBusinessRoleResponse")]
        bool UpdateBusinessRole(string businessRoleId, string name, string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBusinessRole", ReplyAction="http://tempuri.org/IService1/UpdateBusinessRoleResponse")]
        System.Threading.Tasks.Task<bool> UpdateBusinessRoleAsync(string businessRoleId, string name, string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBusinessRole", ReplyAction="http://tempuri.org/IService1/DeleteBusinessRoleResponse")]
        bool DeleteBusinessRole(string businessRoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBusinessRole", ReplyAction="http://tempuri.org/IService1/DeleteBusinessRoleResponse")]
        System.Threading.Tasks.Task<bool> DeleteBusinessRoleAsync(string businessRoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessRoles", ReplyAction="http://tempuri.org/IService1/GetBusinessRolesResponse")]
        DBService.Models.BusinessRole[] GetBusinessRoles(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessRoles", ReplyAction="http://tempuri.org/IService1/GetBusinessRolesResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessRole[]> GetBusinessRolesAsync(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertAdmin", ReplyAction="http://tempuri.org/IService1/InsertAdminResponse")]
        short InsertAdmin(string adminName, string userName, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertAdmin", ReplyAction="http://tempuri.org/IService1/InsertAdminResponse")]
        System.Threading.Tasks.Task<short> InsertAdminAsync(string adminName, string userName, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectOneAdmin", ReplyAction="http://tempuri.org/IService1/SelectOneAdminResponse")]
        DBService.Models.AdminClass SelectOneAdmin(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectOneAdmin", ReplyAction="http://tempuri.org/IService1/SelectOneAdminResponse")]
        System.Threading.Tasks.Task<DBService.Models.AdminClass> SelectOneAdminAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertOneBlacklist", ReplyAction="http://tempuri.org/IService1/InsertOneBlacklistResponse")]
        short InsertOneBlacklist(int duration, string reason, string customerId, string customerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertOneBlacklist", ReplyAction="http://tempuri.org/IService1/InsertOneBlacklistResponse")]
        System.Threading.Tasks.Task<short> InsertOneBlacklistAsync(int duration, string reason, string customerId, string customerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBlacklistDeleted", ReplyAction="http://tempuri.org/IService1/UpdateBlacklistDeletedResponse")]
        short UpdateBlacklistDeleted(System.Guid ID, string customerId, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBlacklistDeleted", ReplyAction="http://tempuri.org/IService1/UpdateBlacklistDeletedResponse")]
        System.Threading.Tasks.Task<short> UpdateBlacklistDeletedAsync(System.Guid ID, string customerId, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectOneBlacklist", ReplyAction="http://tempuri.org/IService1/SelectOneBlacklistResponse")]
        DBService.Models.BlackListClass SelectOneBlacklist(System.Guid ID, string customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectOneBlacklist", ReplyAction="http://tempuri.org/IService1/SelectOneBlacklistResponse")]
        System.Threading.Tasks.Task<DBService.Models.BlackListClass> SelectOneBlacklistAsync(System.Guid ID, string customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllBlacklist", ReplyAction="http://tempuri.org/IService1/SelectAllBlacklistResponse")]
        DBService.Models.BlackListClass[] SelectAllBlacklist(string customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllBlacklist", ReplyAction="http://tempuri.org/IService1/SelectAllBlacklistResponse")]
        System.Threading.Tasks.Task<DBService.Models.BlackListClass[]> SelectAllBlacklistAsync(string customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllAdmin", ReplyAction="http://tempuri.org/IService1/SelectAllAdminResponse")]
        DBService.Models.AdminClass[] SelectAllAdmin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllAdmin", ReplyAction="http://tempuri.org/IService1/SelectAllAdminResponse")]
        System.Threading.Tasks.Task<DBService.Models.AdminClass[]> SelectAllAdminAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllBusiness", ReplyAction="http://tempuri.org/IService1/SelectAllBusinessResponse")]
        DBService.Models.BusinessUser[] SelectAllBusiness();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllBusiness", ReplyAction="http://tempuri.org/IService1/SelectAllBusinessResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessUser[]> SelectAllBusinessAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : EDP_Project.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<EDP_Project.ServiceReference1.IService1>, EDP_Project.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateBusiness(string name, string regNum, string url, string type, string acra, string logoId, string userId) {
            return base.Channel.CreateBusiness(name, regNum, url, type, acra, logoId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> CreateBusinessAsync(string name, string regNum, string url, string type, string acra, string logoId, string userId) {
            return base.Channel.CreateBusinessAsync(name, regNum, url, type, acra, logoId, userId);
        }
        
        public DBService.Models.Business[] GetAllBusinesses() {
            return base.Channel.GetAllBusinesses();
        }
        
        public System.Threading.Tasks.Task<DBService.Models.Business[]> GetAllBusinessesAsync() {
            return base.Channel.GetAllBusinessesAsync();
        }
        
        public DBService.Models.Business[] GetAllBusinessByUserId(string userId) {
            return base.Channel.GetAllBusinessByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.Business[]> GetAllBusinessByUserIdAsync(string userId) {
            return base.Channel.GetAllBusinessByUserIdAsync(userId);
        }
        
        public DBService.Models.Business GetSingleBusinessByBusinessId(string businessId) {
            return base.Channel.GetSingleBusinessByBusinessId(businessId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.Business> GetSingleBusinessByBusinessIdAsync(string businessId) {
            return base.Channel.GetSingleBusinessByBusinessIdAsync(businessId);
        }
        
        public bool UpdateBusinessDetails(string businessId, string name, string registrationNumber, string url, string type, string acra, string logoId) {
            return base.Channel.UpdateBusinessDetails(businessId, name, registrationNumber, url, type, acra, logoId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBusinessDetailsAsync(string businessId, string name, string registrationNumber, string url, string type, string acra, string logoId) {
            return base.Channel.UpdateBusinessDetailsAsync(businessId, name, registrationNumber, url, type, acra, logoId);
        }
        
        public bool DeleteBusiness(string businessId) {
            return base.Channel.DeleteBusiness(businessId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBusinessAsync(string businessId) {
            return base.Channel.DeleteBusinessAsync(businessId);
        }
        
        public DBService.Models.BusinessEmployeeAccess[] GetAllEmployeeByBusinessId(string businessId) {
            return base.Channel.GetAllEmployeeByBusinessId(businessId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessEmployeeAccess[]> GetAllEmployeeByBusinessIdAsync(string businessId) {
            return base.Channel.GetAllEmployeeByBusinessIdAsync(businessId);
        }
        
        public bool AddEmployeeToBusinessByEmail(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role) {
            return base.Channel.AddEmployeeToBusinessByEmail(userId, businessId, rApp, wApp, rCC, wCC, role);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmployeeToBusinessByEmailAsync(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role) {
            return base.Channel.AddEmployeeToBusinessByEmailAsync(userId, businessId, rApp, wApp, rCC, wCC, role);
        }
        
        public bool BusinessUserExists(string email) {
            return base.Channel.BusinessUserExists(email);
        }
        
        public System.Threading.Tasks.Task<bool> BusinessUserExistsAsync(string email) {
            return base.Channel.BusinessUserExistsAsync(email);
        }
        
        public DBService.Models.BusinessEmployeeAccess[] GetAllInvitationsByUserId(string userId) {
            return base.Channel.GetAllInvitationsByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessEmployeeAccess[]> GetAllInvitationsByUserIdAsync(string userId) {
            return base.Channel.GetAllInvitationsByUserIdAsync(userId);
        }
        
        public bool UpdateEmployeeAccess(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role) {
            return base.Channel.UpdateEmployeeAccess(userId, businessId, rApp, wApp, rCC, wCC, role);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEmployeeAccessAsync(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role) {
            return base.Channel.UpdateEmployeeAccessAsync(userId, businessId, rApp, wApp, rCC, wCC, role);
        }
        
        public bool DeleteEmployeeAccess(string userId, string businessId) {
            return base.Channel.DeleteEmployeeAccess(userId, businessId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAccessAsync(string userId, string businessId) {
            return base.Channel.DeleteEmployeeAccessAsync(userId, businessId);
        }
        
        public bool CreateBusinessUser(string name, string email, string password, string phone) {
            return base.Channel.CreateBusinessUser(name, email, password, phone);
        }
        
        public System.Threading.Tasks.Task<bool> CreateBusinessUserAsync(string name, string email, string password, string phone) {
            return base.Channel.CreateBusinessUserAsync(name, email, password, phone);
        }
        
        public DBService.Models.BusinessUser GetBusinessUserByUserId(string userId) {
            return base.Channel.GetBusinessUserByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessUser> GetBusinessUserByUserIdAsync(string userId) {
            return base.Channel.GetBusinessUserByUserIdAsync(userId);
        }
        
        public DBService.Models.BusinessUser GetBusinessUserByEmail(string email) {
            return base.Channel.GetBusinessUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessUser> GetBusinessUserByEmailAsync(string email) {
            return base.Channel.GetBusinessUserByEmailAsync(email);
        }
        
        public short InsertCustomer(string firstName, string lastName, string email, string password, string phoneNumber, System.DateTime dateOfBirth) {
            return base.Channel.InsertCustomer(firstName, lastName, email, password, phoneNumber, dateOfBirth);
        }
        
        public System.Threading.Tasks.Task<short> InsertCustomerAsync(string firstName, string lastName, string email, string password, string phoneNumber, System.DateTime dateOfBirth) {
            return base.Channel.InsertCustomerAsync(firstName, lastName, email, password, phoneNumber, dateOfBirth);
        }
        
        public DBService.Models.CustomerClass SelectOneCustomer(string Email) {
            return base.Channel.SelectOneCustomer(Email);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.CustomerClass> SelectOneCustomerAsync(string Email) {
            return base.Channel.SelectOneCustomerAsync(Email);
        }
        
        public DBService.Models.CustomerClass[] SelectAllCustomer() {
            return base.Channel.SelectAllCustomer();
        }
        
        public System.Threading.Tasks.Task<DBService.Models.CustomerClass[]> SelectAllCustomerAsync() {
            return base.Channel.SelectAllCustomerAsync();
        }
        
        public DBService.Models.CustomerClass VerifyCustomer(string Email) {
            return base.Channel.VerifyCustomer(Email);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.CustomerClass> VerifyCustomerAsync(string Email) {
            return base.Channel.VerifyCustomerAsync(Email);
        }
        
        public bool VerifyPassword(string Email, string Password, string Role) {
            return base.Channel.VerifyPassword(Email, Password, Role);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyPasswordAsync(string Email, string Password, string Role) {
            return base.Channel.VerifyPasswordAsync(Email, Password, Role);
        }
        
        public short UpdateCustomer(System.Guid ID, string PastEmail, string firstName, string lastName, string email, string PhoneNumber, System.DateTime dateOfBirth) {
            return base.Channel.UpdateCustomer(ID, PastEmail, firstName, lastName, email, PhoneNumber, dateOfBirth);
        }
        
        public System.Threading.Tasks.Task<short> UpdateCustomerAsync(System.Guid ID, string PastEmail, string firstName, string lastName, string email, string PhoneNumber, System.DateTime dateOfBirth) {
            return base.Channel.UpdateCustomerAsync(ID, PastEmail, firstName, lastName, email, PhoneNumber, dateOfBirth);
        }
        
        public short UpdateCustomerPassword(System.Guid ID, string PastEmail, string Password) {
            return base.Channel.UpdateCustomerPassword(ID, PastEmail, Password);
        }
        
        public System.Threading.Tasks.Task<short> UpdateCustomerPasswordAsync(System.Guid ID, string PastEmail, string Password) {
            return base.Channel.UpdateCustomerPasswordAsync(ID, PastEmail, Password);
        }
        
        public short UpdateCustomerStatus(System.Guid ID, string PastEmail, string purpose, bool status) {
            return base.Channel.UpdateCustomerStatus(ID, PastEmail, purpose, status);
        }
        
        public System.Threading.Tasks.Task<short> UpdateCustomerStatusAsync(System.Guid ID, string PastEmail, string purpose, bool status) {
            return base.Channel.UpdateCustomerStatusAsync(ID, PastEmail, purpose, status);
        }
        
        public short DeleteCustomer(System.Guid ID, string Email, System.DateTime deleteDate) {
            return base.Channel.DeleteCustomer(ID, Email, deleteDate);
        }
        
        public System.Threading.Tasks.Task<short> DeleteCustomerAsync(System.Guid ID, string Email, System.DateTime deleteDate) {
            return base.Channel.DeleteCustomerAsync(ID, Email, deleteDate);
        }
        
        public string[] SelectDistinctShopNameFromBranch() {
            return base.Channel.SelectDistinctShopNameFromBranch();
        }
        
        public System.Threading.Tasks.Task<string[]> SelectDistinctShopNameFromBranchAsync() {
            return base.Channel.SelectDistinctShopNameFromBranchAsync();
        }
        
        public System.Data.DataSet SelectDistinctLocationFromBranch() {
            return base.Channel.SelectDistinctLocationFromBranch();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectDistinctLocationFromBranchAsync() {
            return base.Channel.SelectDistinctLocationFromBranchAsync();
        }
        
        public System.Data.DataSet SelectDistinctCategoryFromBranch() {
            return base.Channel.SelectDistinctCategoryFromBranch();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectDistinctCategoryFromBranchAsync() {
            return base.Channel.SelectDistinctCategoryFromBranchAsync();
        }
        
        public System.Data.DataSet SearchFromBranch(string search, string location, string category) {
            return base.Channel.SearchFromBranch(search, location, category);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchFromBranchAsync(string search, string location, string category) {
            return base.Channel.SearchFromBranchAsync(search, location, category);
        }
        
        public DBService.Models.Branch SelectByIdFromBranch(System.Guid id) {
            return base.Channel.SelectByIdFromBranch(id);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.Branch> SelectByIdFromBranchAsync(System.Guid id) {
            return base.Channel.SelectByIdFromBranchAsync(id);
        }
        
        public int CreateSearch(string searchString, System.Guid customerId) {
            return base.Channel.CreateSearch(searchString, customerId);
        }
        
        public System.Threading.Tasks.Task<int> CreateSearchAsync(string searchString, System.Guid customerId) {
            return base.Channel.CreateSearchAsync(searchString, customerId);
        }
        
        public System.Data.DataSet SelectByCustomerIdFromSearch(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromSearch(customerId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromSearchAsync(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromSearchAsync(customerId);
        }
        
        public int HaveDateFromSearch(string searchString, System.Guid customerId) {
            return base.Channel.HaveDateFromSearch(searchString, customerId);
        }
        
        public System.Threading.Tasks.Task<int> HaveDateFromSearchAsync(string searchString, System.Guid customerId) {
            return base.Channel.HaveDateFromSearchAsync(searchString, customerId);
        }
        
        public int UpdateSearch(int id) {
            return base.Channel.UpdateSearch(id);
        }
        
        public System.Threading.Tasks.Task<int> UpdateSearchAsync(int id) {
            return base.Channel.UpdateSearchAsync(id);
        }
        
        public int DeleteFromSearch(System.Guid customerId) {
            return base.Channel.DeleteFromSearch(customerId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFromSearchAsync(System.Guid customerId) {
            return base.Channel.DeleteFromSearchAsync(customerId);
        }
        
        public int InsertView(System.Guid branchId, System.Guid customerId) {
            return base.Channel.InsertView(branchId, customerId);
        }
        
        public System.Threading.Tasks.Task<int> InsertViewAsync(System.Guid branchId, System.Guid customerId) {
            return base.Channel.InsertViewAsync(branchId, customerId);
        }
        
        public System.Data.DataSet SelectByCustomerIdFromView(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromView(customerId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromViewAsync(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromViewAsync(customerId);
        }
        
        public int HaveDateFromView(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveDateFromView(branchId, customerId);
        }
        
        public System.Threading.Tasks.Task<int> HaveDateFromViewAsync(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveDateFromViewAsync(branchId, customerId);
        }
        
        public int UpdateView(int id) {
            return base.Channel.UpdateView(id);
        }
        
        public System.Threading.Tasks.Task<int> UpdateViewAsync(int id) {
            return base.Channel.UpdateViewAsync(id);
        }
        
        public int DeleteFromView(System.Guid customerId) {
            return base.Channel.DeleteFromView(customerId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFromViewAsync(System.Guid customerId) {
            return base.Channel.DeleteFromViewAsync(customerId);
        }
        
        public int InsertReview(double rating, string comment, string title, System.Guid customerId, System.Guid branchId) {
            return base.Channel.InsertReview(rating, comment, title, customerId, branchId);
        }
        
        public System.Threading.Tasks.Task<int> InsertReviewAsync(double rating, string comment, string title, System.Guid customerId, System.Guid branchId) {
            return base.Channel.InsertReviewAsync(rating, comment, title, customerId, branchId);
        }
        
        public System.Data.DataSet SelectByBranchIdFromReview(System.Guid id, System.Guid customerId, string sort) {
            return base.Channel.SelectByBranchIdFromReview(id, customerId, sort);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByBranchIdFromReviewAsync(System.Guid id, System.Guid customerId, string sort) {
            return base.Channel.SelectByBranchIdFromReviewAsync(id, customerId, sort);
        }
        
        public System.Data.DataSet SelectAllByBranchIdFromReview(System.Guid id, string sort) {
            return base.Channel.SelectAllByBranchIdFromReview(id, sort);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBranchIdFromReviewAsync(System.Guid id, string sort) {
            return base.Channel.SelectAllByBranchIdFromReviewAsync(id, sort);
        }
        
        public DBService.Models.Review HaveExistingReview(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveExistingReview(branchId, customerId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.Review> HaveExistingReviewAsync(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveExistingReviewAsync(branchId, customerId);
        }
        
        public int UpdateReview(int id, string title, string comment, double rating) {
            return base.Channel.UpdateReview(id, title, comment, rating);
        }
        
        public System.Threading.Tasks.Task<int> UpdateReviewAsync(int id, string title, string comment, double rating) {
            return base.Channel.UpdateReviewAsync(id, title, comment, rating);
        }
        
        public int DeleteReview(int id) {
            return base.Channel.DeleteReview(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteReviewAsync(int id) {
            return base.Channel.DeleteReviewAsync(id);
        }
        
        public System.Data.DataSet SelectByCustomerIdFromReview(System.Guid id) {
            return base.Channel.SelectByCustomerIdFromReview(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromReviewAsync(System.Guid id) {
            return base.Channel.SelectByCustomerIdFromReviewAsync(id);
        }
        
        public double SelectRatingByBranchIdFromReview(System.Guid branchId) {
            return base.Channel.SelectRatingByBranchIdFromReview(branchId);
        }
        
        public System.Threading.Tasks.Task<double> SelectRatingByBranchIdFromReviewAsync(System.Guid branchId) {
            return base.Channel.SelectRatingByBranchIdFromReviewAsync(branchId);
        }
        
        public System.Data.DataSet SelectReportedReview() {
            return base.Channel.SelectReportedReview();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectReportedReviewAsync() {
            return base.Channel.SelectReportedReviewAsync();
        }
        
        public int AddNumReportToReview(int id) {
            return base.Channel.AddNumReportToReview(id);
        }
        
        public System.Threading.Tasks.Task<int> AddNumReportToReviewAsync(int id) {
            return base.Channel.AddNumReportToReviewAsync(id);
        }
        
        public int ResetNumReportToReview(int id) {
            return base.Channel.ResetNumReportToReview(id);
        }
        
        public System.Threading.Tasks.Task<int> ResetNumReportToReviewAsync(int id) {
            return base.Channel.ResetNumReportToReviewAsync(id);
        }
        
        public int CreateAppointment(string aptdate, string apttime, string bookdate, string booktime, string partysize) {
            return base.Channel.CreateAppointment(aptdate, apttime, bookdate, booktime, partysize);
        }
        
        public System.Threading.Tasks.Task<int> CreateAppointmentAsync(string aptdate, string apttime, string bookdate, string booktime, string partysize) {
            return base.Channel.CreateAppointmentAsync(aptdate, apttime, bookdate, booktime, partysize);
        }
        
        public DBService.Models.BusinessRole CreateBusinessRole(string name, string businessId) {
            return base.Channel.CreateBusinessRole(name, businessId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessRole> CreateBusinessRoleAsync(string name, string businessId) {
            return base.Channel.CreateBusinessRoleAsync(name, businessId);
        }
        
        public DBService.Models.BusinessRole GetBusinessRole(string businessRoleId) {
            return base.Channel.GetBusinessRole(businessRoleId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessRole> GetBusinessRoleAsync(string businessRoleId) {
            return base.Channel.GetBusinessRoleAsync(businessRoleId);
        }
        
        public bool UpdateBusinessRole(string businessRoleId, string name, string businessId) {
            return base.Channel.UpdateBusinessRole(businessRoleId, name, businessId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBusinessRoleAsync(string businessRoleId, string name, string businessId) {
            return base.Channel.UpdateBusinessRoleAsync(businessRoleId, name, businessId);
        }
        
        public bool DeleteBusinessRole(string businessRoleId) {
            return base.Channel.DeleteBusinessRole(businessRoleId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBusinessRoleAsync(string businessRoleId) {
            return base.Channel.DeleteBusinessRoleAsync(businessRoleId);
        }
        
        public DBService.Models.BusinessRole[] GetBusinessRoles(string businessId) {
            return base.Channel.GetBusinessRoles(businessId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessRole[]> GetBusinessRolesAsync(string businessId) {
            return base.Channel.GetBusinessRolesAsync(businessId);
        }
        
        public short InsertAdmin(string adminName, string userName, string password, string role) {
            return base.Channel.InsertAdmin(adminName, userName, password, role);
        }
        
        public System.Threading.Tasks.Task<short> InsertAdminAsync(string adminName, string userName, string password, string role) {
            return base.Channel.InsertAdminAsync(adminName, userName, password, role);
        }
        
        public DBService.Models.AdminClass SelectOneAdmin(string userName) {
            return base.Channel.SelectOneAdmin(userName);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.AdminClass> SelectOneAdminAsync(string userName) {
            return base.Channel.SelectOneAdminAsync(userName);
        }
        
        public short InsertOneBlacklist(int duration, string reason, string customerId, string customerName) {
            return base.Channel.InsertOneBlacklist(duration, reason, customerId, customerName);
        }
        
        public System.Threading.Tasks.Task<short> InsertOneBlacklistAsync(int duration, string reason, string customerId, string customerName) {
            return base.Channel.InsertOneBlacklistAsync(duration, reason, customerId, customerName);
        }
        
        public short UpdateBlacklistDeleted(System.Guid ID, string customerId, bool status) {
            return base.Channel.UpdateBlacklistDeleted(ID, customerId, status);
        }
        
        public System.Threading.Tasks.Task<short> UpdateBlacklistDeletedAsync(System.Guid ID, string customerId, bool status) {
            return base.Channel.UpdateBlacklistDeletedAsync(ID, customerId, status);
        }
        
        public DBService.Models.BlackListClass SelectOneBlacklist(System.Guid ID, string customerId) {
            return base.Channel.SelectOneBlacklist(ID, customerId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BlackListClass> SelectOneBlacklistAsync(System.Guid ID, string customerId) {
            return base.Channel.SelectOneBlacklistAsync(ID, customerId);
        }
        
        public DBService.Models.BlackListClass[] SelectAllBlacklist(string customerId) {
            return base.Channel.SelectAllBlacklist(customerId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BlackListClass[]> SelectAllBlacklistAsync(string customerId) {
            return base.Channel.SelectAllBlacklistAsync(customerId);
        }
        
        public DBService.Models.AdminClass[] SelectAllAdmin() {
            return base.Channel.SelectAllAdmin();
        }
        
        public System.Threading.Tasks.Task<DBService.Models.AdminClass[]> SelectAllAdminAsync() {
            return base.Channel.SelectAllAdminAsync();
        }
        
        public DBService.Models.BusinessUser[] SelectAllBusiness() {
            return base.Channel.SelectAllBusiness();
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessUser[]> SelectAllBusinessAsync() {
            return base.Channel.SelectAllBusinessAsync();
        }
    }
}
