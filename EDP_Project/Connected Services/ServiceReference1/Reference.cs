//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDP_Project.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusiness", ReplyAction="http://tempuri.org/IService1/CreateBusinessResponse")]
        bool CreateBusiness(string name, string regNum, string url, string type, string acra, string logoId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusiness", ReplyAction="http://tempuri.org/IService1/CreateBusinessResponse")]
        System.Threading.Tasks.Task<bool> CreateBusinessAsync(string name, string regNum, string url, string type, string acra, string logoId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllBusinesses", ReplyAction="http://tempuri.org/IService1/GetAllBusinessesResponse")]
        DBService.Models.Business[] GetAllBusinesses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllBusinesses", ReplyAction="http://tempuri.org/IService1/GetAllBusinessesResponse")]
        System.Threading.Tasks.Task<DBService.Models.Business[]> GetAllBusinessesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllBusinessByUserId", ReplyAction="http://tempuri.org/IService1/GetAllBusinessByUserIdResponse")]
        DBService.Models.Business[] GetAllBusinessByUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllBusinessByUserId", ReplyAction="http://tempuri.org/IService1/GetAllBusinessByUserIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.Business[]> GetAllBusinessByUserIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleBusinessByBusinessId", ReplyAction="http://tempuri.org/IService1/GetSingleBusinessByBusinessIdResponse")]
        DBService.Models.Business GetSingleBusinessByBusinessId(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleBusinessByBusinessId", ReplyAction="http://tempuri.org/IService1/GetSingleBusinessByBusinessIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.Business> GetSingleBusinessByBusinessIdAsync(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBusinessDetails", ReplyAction="http://tempuri.org/IService1/UpdateBusinessDetailsResponse")]
        bool UpdateBusinessDetails(string businessId, string name, string registrationNumber, string url, string type, string acra, string logoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBusinessDetails", ReplyAction="http://tempuri.org/IService1/UpdateBusinessDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateBusinessDetailsAsync(string businessId, string name, string registrationNumber, string url, string type, string acra, string logoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBusiness", ReplyAction="http://tempuri.org/IService1/DeleteBusinessResponse")]
        bool DeleteBusiness(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBusiness", ReplyAction="http://tempuri.org/IService1/DeleteBusinessResponse")]
        System.Threading.Tasks.Task<bool> DeleteBusinessAsync(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployeeByBusinessId", ReplyAction="http://tempuri.org/IService1/GetAllEmployeeByBusinessIdResponse")]
        DBService.Models.BusinessEmployeeAccess[] GetAllEmployeeByBusinessId(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployeeByBusinessId", ReplyAction="http://tempuri.org/IService1/GetAllEmployeeByBusinessIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessEmployeeAccess[]> GetAllEmployeeByBusinessIdAsync(string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployeeToBusinessByEmail", ReplyAction="http://tempuri.org/IService1/AddEmployeeToBusinessByEmailResponse")]
        bool AddEmployeeToBusinessByEmail(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployeeToBusinessByEmail", ReplyAction="http://tempuri.org/IService1/AddEmployeeToBusinessByEmailResponse")]
        System.Threading.Tasks.Task<bool> AddEmployeeToBusinessByEmailAsync(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BusinessUserExists", ReplyAction="http://tempuri.org/IService1/BusinessUserExistsResponse")]
        bool BusinessUserExists(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BusinessUserExists", ReplyAction="http://tempuri.org/IService1/BusinessUserExistsResponse")]
        System.Threading.Tasks.Task<bool> BusinessUserExistsAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllInvitationsByUserId", ReplyAction="http://tempuri.org/IService1/GetAllInvitationsByUserIdResponse")]
        DBService.Models.BusinessEmployeeAccess[] GetAllInvitationsByUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllInvitationsByUserId", ReplyAction="http://tempuri.org/IService1/GetAllInvitationsByUserIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessEmployeeAccess[]> GetAllInvitationsByUserIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEmployeeAccess", ReplyAction="http://tempuri.org/IService1/UpdateEmployeeAccessResponse")]
        bool UpdateEmployeeAccess(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEmployeeAccess", ReplyAction="http://tempuri.org/IService1/UpdateEmployeeAccessResponse")]
        System.Threading.Tasks.Task<bool> UpdateEmployeeAccessAsync(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployeeAccess", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeAccessResponse")]
        bool DeleteEmployeeAccess(string userId, string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployeeAccess", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeAccessResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAccessAsync(string userId, string businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusinessUser", ReplyAction="http://tempuri.org/IService1/CreateBusinessUserResponse")]
        bool CreateBusinessUser(string name, string email, string password, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBusinessUser", ReplyAction="http://tempuri.org/IService1/CreateBusinessUserResponse")]
        System.Threading.Tasks.Task<bool> CreateBusinessUserAsync(string name, string email, string password, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessUserByUserId", ReplyAction="http://tempuri.org/IService1/GetBusinessUserByUserIdResponse")]
        DBService.Models.BusinessUser GetBusinessUserByUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessUserByUserId", ReplyAction="http://tempuri.org/IService1/GetBusinessUserByUserIdResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessUser> GetBusinessUserByUserIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessUserByEmail", ReplyAction="http://tempuri.org/IService1/GetBusinessUserByEmailResponse")]
        DBService.Models.BusinessUser GetBusinessUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBusinessUserByEmail", ReplyAction="http://tempuri.org/IService1/GetBusinessUserByEmailResponse")]
        System.Threading.Tasks.Task<DBService.Models.BusinessUser> GetBusinessUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCustomer", ReplyAction="http://tempuri.org/IService1/InsertCustomerResponse")]
        short InsertCustomer(string firstName, string lastName, string email, string password, string phoneNumber, System.DateTime dateOfBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCustomer", ReplyAction="http://tempuri.org/IService1/InsertCustomerResponse")]
        System.Threading.Tasks.Task<short> InsertCustomerAsync(string firstName, string lastName, string email, string password, string phoneNumber, System.DateTime dateOfBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectOneCustomer", ReplyAction="http://tempuri.org/IService1/SelectOneCustomerResponse")]
        DBService.Models.CustomerClass SelectOneCustomer(System.Guid ID, string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectOneCustomer", ReplyAction="http://tempuri.org/IService1/SelectOneCustomerResponse")]
        System.Threading.Tasks.Task<DBService.Models.CustomerClass> SelectOneCustomerAsync(System.Guid ID, string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllCustomer", ReplyAction="http://tempuri.org/IService1/SelectAllCustomerResponse")]
        DBService.Models.CustomerClass[] SelectAllCustomer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllCustomer", ReplyAction="http://tempuri.org/IService1/SelectAllCustomerResponse")]
        System.Threading.Tasks.Task<DBService.Models.CustomerClass[]> SelectAllCustomerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyCustomer", ReplyAction="http://tempuri.org/IService1/VerifyCustomerResponse")]
        DBService.Models.CustomerClass VerifyCustomer(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyCustomer", ReplyAction="http://tempuri.org/IService1/VerifyCustomerResponse")]
        System.Threading.Tasks.Task<DBService.Models.CustomerClass> VerifyCustomerAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyPassword", ReplyAction="http://tempuri.org/IService1/VerifyPasswordResponse")]
        bool VerifyPassword(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyPassword", ReplyAction="http://tempuri.org/IService1/VerifyPasswordResponse")]
        System.Threading.Tasks.Task<bool> VerifyPasswordAsync(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomer", ReplyAction="http://tempuri.org/IService1/UpdateCustomerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBService.Models.Business[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBService.Models.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBService.Models.BusinessEmployeeAccess[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBService.Models.BusinessEmployeeAccess))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBService.Models.BusinessUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBService.Models.CustomerClass))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBService.Models.CustomerClass[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        short UpdateCustomer(System.Guid ID, string PastEmail, string purpose, object valueOne, object valueTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCustomer", ReplyAction="http://tempuri.org/IService1/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<short> UpdateCustomerAsync(System.Guid ID, string PastEmail, string purpose, object valueOne, object valueTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCustomer", ReplyAction="http://tempuri.org/IService1/DeleteCustomerResponse")]
        short DeleteCustomer(System.Guid ID, string Email, System.DateTime deleteDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCustomer", ReplyAction="http://tempuri.org/IService1/DeleteCustomerResponse")]
        System.Threading.Tasks.Task<short> DeleteCustomerAsync(System.Guid ID, string Email, System.DateTime deleteDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctShopNameFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctShopNameFromBranchResponse")]
        string[] SelectDistinctShopNameFromBranch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctShopNameFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctShopNameFromBranchResponse")]
        System.Threading.Tasks.Task<string[]> SelectDistinctShopNameFromBranchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctLocationFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctLocationFromBranchResponse")]
        System.Data.DataSet SelectDistinctLocationFromBranch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctLocationFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctLocationFromBranchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectDistinctLocationFromBranchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFromBranch", ReplyAction="http://tempuri.org/IService1/SearchFromBranchResponse")]
        System.Data.DataSet SearchFromBranch(string search, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFromBranch", ReplyAction="http://tempuri.org/IService1/SearchFromBranchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchFromBranchAsync(string search, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSearch", ReplyAction="http://tempuri.org/IService1/CreateSearchResponse")]
        int CreateSearch(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSearch", ReplyAction="http://tempuri.org/IService1/CreateSearchResponse")]
        System.Threading.Tasks.Task<int> CreateSearchAsync(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromSearch", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromSearchResponse")]
        System.Data.DataSet SelectByCustomerIdFromSearch(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromSearch", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromSearchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromSearchAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromSearch", ReplyAction="http://tempuri.org/IService1/HaveDateFromSearchResponse")]
        int HaveDateFromSearch(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromSearch", ReplyAction="http://tempuri.org/IService1/HaveDateFromSearchResponse")]
        System.Threading.Tasks.Task<int> HaveDateFromSearchAsync(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSearch", ReplyAction="http://tempuri.org/IService1/UpdateSearchResponse")]
        int UpdateSearch(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSearch", ReplyAction="http://tempuri.org/IService1/UpdateSearchResponse")]
        System.Threading.Tasks.Task<int> UpdateSearchAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromSearch", ReplyAction="http://tempuri.org/IService1/DeleteFromSearchResponse")]
        int DeleteFromSearch(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromSearch", ReplyAction="http://tempuri.org/IService1/DeleteFromSearchResponse")]
        System.Threading.Tasks.Task<int> DeleteFromSearchAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertView", ReplyAction="http://tempuri.org/IService1/InsertViewResponse")]
        int InsertView(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertView", ReplyAction="http://tempuri.org/IService1/InsertViewResponse")]
        System.Threading.Tasks.Task<int> InsertViewAsync(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromView", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromViewResponse")]
        System.Data.DataSet SelectByCustomerIdFromView(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromView", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromViewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromViewAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromView", ReplyAction="http://tempuri.org/IService1/HaveDateFromViewResponse")]
        int HaveDateFromView(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromView", ReplyAction="http://tempuri.org/IService1/HaveDateFromViewResponse")]
        System.Threading.Tasks.Task<int> HaveDateFromViewAsync(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateView", ReplyAction="http://tempuri.org/IService1/UpdateViewResponse")]
        int UpdateView(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateView", ReplyAction="http://tempuri.org/IService1/UpdateViewResponse")]
        System.Threading.Tasks.Task<int> UpdateViewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromView", ReplyAction="http://tempuri.org/IService1/DeleteFromViewResponse")]
        int DeleteFromView(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromView", ReplyAction="http://tempuri.org/IService1/DeleteFromViewResponse")]
        System.Threading.Tasks.Task<int> DeleteFromViewAsync(System.Guid customerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : EDP_Project.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<EDP_Project.ServiceReference1.IService1>, EDP_Project.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateBusiness(string name, string regNum, string url, string type, string acra, string logoId, string userId) {
            return base.Channel.CreateBusiness(name, regNum, url, type, acra, logoId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> CreateBusinessAsync(string name, string regNum, string url, string type, string acra, string logoId, string userId) {
            return base.Channel.CreateBusinessAsync(name, regNum, url, type, acra, logoId, userId);
        }
        
        public DBService.Models.Business[] GetAllBusinesses() {
            return base.Channel.GetAllBusinesses();
        }
        
        public System.Threading.Tasks.Task<DBService.Models.Business[]> GetAllBusinessesAsync() {
            return base.Channel.GetAllBusinessesAsync();
        }
        
        public DBService.Models.Business[] GetAllBusinessByUserId(string userId) {
            return base.Channel.GetAllBusinessByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.Business[]> GetAllBusinessByUserIdAsync(string userId) {
            return base.Channel.GetAllBusinessByUserIdAsync(userId);
        }
        
        public DBService.Models.Business GetSingleBusinessByBusinessId(string businessId) {
            return base.Channel.GetSingleBusinessByBusinessId(businessId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.Business> GetSingleBusinessByBusinessIdAsync(string businessId) {
            return base.Channel.GetSingleBusinessByBusinessIdAsync(businessId);
        }
        
        public bool UpdateBusinessDetails(string businessId, string name, string registrationNumber, string url, string type, string acra, string logoId) {
            return base.Channel.UpdateBusinessDetails(businessId, name, registrationNumber, url, type, acra, logoId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBusinessDetailsAsync(string businessId, string name, string registrationNumber, string url, string type, string acra, string logoId) {
            return base.Channel.UpdateBusinessDetailsAsync(businessId, name, registrationNumber, url, type, acra, logoId);
        }
        
        public bool DeleteBusiness(string businessId) {
            return base.Channel.DeleteBusiness(businessId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBusinessAsync(string businessId) {
            return base.Channel.DeleteBusinessAsync(businessId);
        }
        
        public DBService.Models.BusinessEmployeeAccess[] GetAllEmployeeByBusinessId(string businessId) {
            return base.Channel.GetAllEmployeeByBusinessId(businessId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessEmployeeAccess[]> GetAllEmployeeByBusinessIdAsync(string businessId) {
            return base.Channel.GetAllEmployeeByBusinessIdAsync(businessId);
        }
        
        public bool AddEmployeeToBusinessByEmail(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role) {
            return base.Channel.AddEmployeeToBusinessByEmail(userId, businessId, rApp, wApp, rCC, wCC, role);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmployeeToBusinessByEmailAsync(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role) {
            return base.Channel.AddEmployeeToBusinessByEmailAsync(userId, businessId, rApp, wApp, rCC, wCC, role);
        }
        
        public bool BusinessUserExists(string email) {
            return base.Channel.BusinessUserExists(email);
        }
        
        public System.Threading.Tasks.Task<bool> BusinessUserExistsAsync(string email) {
            return base.Channel.BusinessUserExistsAsync(email);
        }
        
        public DBService.Models.BusinessEmployeeAccess[] GetAllInvitationsByUserId(string userId) {
            return base.Channel.GetAllInvitationsByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessEmployeeAccess[]> GetAllInvitationsByUserIdAsync(string userId) {
            return base.Channel.GetAllInvitationsByUserIdAsync(userId);
        }
        
        public bool UpdateEmployeeAccess(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role) {
            return base.Channel.UpdateEmployeeAccess(userId, businessId, rApp, wApp, rCC, wCC, role);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEmployeeAccessAsync(string userId, string businessId, bool rApp, bool wApp, bool rCC, bool wCC, string role) {
            return base.Channel.UpdateEmployeeAccessAsync(userId, businessId, rApp, wApp, rCC, wCC, role);
        }
        
        public bool DeleteEmployeeAccess(string userId, string businessId) {
            return base.Channel.DeleteEmployeeAccess(userId, businessId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAccessAsync(string userId, string businessId) {
            return base.Channel.DeleteEmployeeAccessAsync(userId, businessId);
        }
        
        public bool CreateBusinessUser(string name, string email, string password, string phone) {
            return base.Channel.CreateBusinessUser(name, email, password, phone);
        }
        
        public System.Threading.Tasks.Task<bool> CreateBusinessUserAsync(string name, string email, string password, string phone) {
            return base.Channel.CreateBusinessUserAsync(name, email, password, phone);
        }
        
        public DBService.Models.BusinessUser GetBusinessUserByUserId(string userId) {
            return base.Channel.GetBusinessUserByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessUser> GetBusinessUserByUserIdAsync(string userId) {
            return base.Channel.GetBusinessUserByUserIdAsync(userId);
        }
        
        public DBService.Models.BusinessUser GetBusinessUserByEmail(string email) {
            return base.Channel.GetBusinessUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.BusinessUser> GetBusinessUserByEmailAsync(string email) {
            return base.Channel.GetBusinessUserByEmailAsync(email);
        }
        
        public short InsertCustomer(string firstName, string lastName, string email, string password, string phoneNumber, System.DateTime dateOfBirth) {
            return base.Channel.InsertCustomer(firstName, lastName, email, password, phoneNumber, dateOfBirth);
        }
        
        public System.Threading.Tasks.Task<short> InsertCustomerAsync(string firstName, string lastName, string email, string password, string phoneNumber, System.DateTime dateOfBirth) {
            return base.Channel.InsertCustomerAsync(firstName, lastName, email, password, phoneNumber, dateOfBirth);
        }
        
        public DBService.Models.CustomerClass SelectOneCustomer(System.Guid ID, string Email) {
            return base.Channel.SelectOneCustomer(ID, Email);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.CustomerClass> SelectOneCustomerAsync(System.Guid ID, string Email) {
            return base.Channel.SelectOneCustomerAsync(ID, Email);
        }
        
        public DBService.Models.CustomerClass[] SelectAllCustomer() {
            return base.Channel.SelectAllCustomer();
        }
        
        public System.Threading.Tasks.Task<DBService.Models.CustomerClass[]> SelectAllCustomerAsync() {
            return base.Channel.SelectAllCustomerAsync();
        }
        
        public DBService.Models.CustomerClass VerifyCustomer(string Email) {
            return base.Channel.VerifyCustomer(Email);
        }
        
        public System.Threading.Tasks.Task<DBService.Models.CustomerClass> VerifyCustomerAsync(string Email) {
            return base.Channel.VerifyCustomerAsync(Email);
        }
        
        public bool VerifyPassword(string Email, string Password) {
            return base.Channel.VerifyPassword(Email, Password);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyPasswordAsync(string Email, string Password) {
            return base.Channel.VerifyPasswordAsync(Email, Password);
        }
        
        public short UpdateCustomer(System.Guid ID, string PastEmail, string purpose, object valueOne, object valueTwo) {
            return base.Channel.UpdateCustomer(ID, PastEmail, purpose, valueOne, valueTwo);
        }
        
        public System.Threading.Tasks.Task<short> UpdateCustomerAsync(System.Guid ID, string PastEmail, string purpose, object valueOne, object valueTwo) {
            return base.Channel.UpdateCustomerAsync(ID, PastEmail, purpose, valueOne, valueTwo);
        }
        
        public short DeleteCustomer(System.Guid ID, string Email, System.DateTime deleteDate) {
            return base.Channel.DeleteCustomer(ID, Email, deleteDate);
        }
        
        public System.Threading.Tasks.Task<short> DeleteCustomerAsync(System.Guid ID, string Email, System.DateTime deleteDate) {
            return base.Channel.DeleteCustomerAsync(ID, Email, deleteDate);
        }
        
        public string[] SelectDistinctShopNameFromBranch() {
            return base.Channel.SelectDistinctShopNameFromBranch();
        }
        
        public System.Threading.Tasks.Task<string[]> SelectDistinctShopNameFromBranchAsync() {
            return base.Channel.SelectDistinctShopNameFromBranchAsync();
        }
        
        public System.Data.DataSet SelectDistinctLocationFromBranch() {
            return base.Channel.SelectDistinctLocationFromBranch();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectDistinctLocationFromBranchAsync() {
            return base.Channel.SelectDistinctLocationFromBranchAsync();
        }
        
        public System.Data.DataSet SearchFromBranch(string search, string location) {
            return base.Channel.SearchFromBranch(search, location);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchFromBranchAsync(string search, string location) {
            return base.Channel.SearchFromBranchAsync(search, location);
        }
        
        public int CreateSearch(string searchString, System.Guid customerId) {
            return base.Channel.CreateSearch(searchString, customerId);
        }
        
        public System.Threading.Tasks.Task<int> CreateSearchAsync(string searchString, System.Guid customerId) {
            return base.Channel.CreateSearchAsync(searchString, customerId);
        }
        
        public System.Data.DataSet SelectByCustomerIdFromSearch(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromSearch(customerId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromSearchAsync(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromSearchAsync(customerId);
        }
        
        public int HaveDateFromSearch(string searchString, System.Guid customerId) {
            return base.Channel.HaveDateFromSearch(searchString, customerId);
        }
        
        public System.Threading.Tasks.Task<int> HaveDateFromSearchAsync(string searchString, System.Guid customerId) {
            return base.Channel.HaveDateFromSearchAsync(searchString, customerId);
        }
        
        public int UpdateSearch(int id) {
            return base.Channel.UpdateSearch(id);
        }
        
        public System.Threading.Tasks.Task<int> UpdateSearchAsync(int id) {
            return base.Channel.UpdateSearchAsync(id);
        }
        
        public int DeleteFromSearch(System.Guid customerId) {
            return base.Channel.DeleteFromSearch(customerId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFromSearchAsync(System.Guid customerId) {
            return base.Channel.DeleteFromSearchAsync(customerId);
        }
        
        public int InsertView(System.Guid branchId, System.Guid customerId) {
            return base.Channel.InsertView(branchId, customerId);
        }
        
        public System.Threading.Tasks.Task<int> InsertViewAsync(System.Guid branchId, System.Guid customerId) {
            return base.Channel.InsertViewAsync(branchId, customerId);
        }
        
        public System.Data.DataSet SelectByCustomerIdFromView(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromView(customerId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromViewAsync(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromViewAsync(customerId);
        }
        
        public int HaveDateFromView(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveDateFromView(branchId, customerId);
        }
        
        public System.Threading.Tasks.Task<int> HaveDateFromViewAsync(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveDateFromViewAsync(branchId, customerId);
        }
        
        public int UpdateView(int id) {
            return base.Channel.UpdateView(id);
        }
        
        public System.Threading.Tasks.Task<int> UpdateViewAsync(int id) {
            return base.Channel.UpdateViewAsync(id);
        }
        
        public int DeleteFromView(System.Guid customerId) {
            return base.Channel.DeleteFromView(customerId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFromViewAsync(System.Guid customerId) {
            return base.Channel.DeleteFromViewAsync(customerId);
        }
    }
}
